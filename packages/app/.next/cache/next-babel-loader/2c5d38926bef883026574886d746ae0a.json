{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { initAuth0 } from \"@auth0/nextjs-auth0\";\nimport * as dotenv from \"dotenv\";\nexport * from \"./types\"; // eslint-disable-next-line import/no-mutable-exports\n\nexport let auth = (() => {\n  if (false) {\n    return undefined;\n  }\n\n  dotenv.config();\n  /**\n   * We use the same Auth0 application to access\n   * Management API and Authentication API right now.\n   * Avoid leaking AUTH0_CLIENT_SECRET to the frontend or\n   * create two apps -- Next Clientside and Next Serverside if\n   * clientside Auth0 Authentication API actions are needed.\n   *\n   * TODO: Check if this code is accessible in browser.\n   */\n\n  const {\n    AUTH0_DOMAIN,\n    AUTH0_CLIENT_ID,\n    AUTH0_CLIENT_SECRET,\n    AUTH0_COOKIE_SECRET\n  } = process.env;\n  const auth0 = initAuth0({\n    domain: AUTH0_DOMAIN,\n    clientId: AUTH0_CLIENT_ID,\n    clientSecret: AUTH0_CLIENT_SECRET,\n    scope: \"openid profile\",\n    redirectUri: \"http://localhost:3000/api/login-callback\",\n    postLogoutRedirectUri: \"http://localhost:3000/\",\n    session: {\n      cookieSecret: AUTH0_COOKIE_SECRET,\n      cookieLifetime: 60 * 60 * 8\n    }\n  }); // TODO: Remove me\n  // user id from session will be exactly the user_id in zagrajmy db\n\n  const getSession = async req => {\n    const session = await auth0.getSession(req);\n\n    if (session) {\n      // getCookie?\n      session.user.uuid = \"not-implemented-yet\";\n    }\n\n    return session;\n  };\n\n  const getSessionOrLogIn = async (req, res) => {\n    if (true && req && res) {\n      const session = await getSession(req);\n\n      if (!(session === null || session === void 0 ? void 0 : session.user)) {\n        res.writeHead(302, {\n          Location: \"/api/login\"\n        });\n        res.end();\n        return {\n          user: null\n        };\n      }\n\n      return {\n        user: session.user\n      };\n    }\n\n    return {\n      user: null\n    };\n  };\n\n  const createManagementClient = () => {\n    if (true) {\n      // eslint-disable-next-line global-require\n      const {\n        ManagementClient\n      } = require(\"auth0\");\n\n      return new ManagementClient({\n        domain: \"zagrajmy.eu.auth0.com\",\n        clientId: AUTH0_CLIENT_ID,\n        clientSecret: AUTH0_CLIENT_SECRET,\n        scope: \"read:users update:users delete:users\",\n        audience: \"https://zagrajmy.eu.auth0.com/api/v2/\"\n      });\n    }\n\n    return new Proxy({}, {\n      get() {\n        throw new Error(`ManagementAPI can't be accessed on clientside`);\n      }\n\n    });\n  };\n\n  return _objectSpread({}, auth0, {\n    getSession,\n    getSessionOrLogIn,\n    management: createManagementClient()\n  });\n})();\nauth = auth || new Proxy({}, {\n  /**\n   * @see https://github.com/auth0/nextjs-auth0/blob/master/src/instance.browser.ts\n   */\n  get(_target, _property) {\n    return () => ({\n      __SHOULD_NOT_BE_USED_IN_BROWSER: true\n    });\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}