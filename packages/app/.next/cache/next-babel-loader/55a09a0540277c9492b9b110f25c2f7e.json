{"ast":null,"code":"import { head } from \"fp-ts/lib/Array\";\nimport * as O from \"fp-ts/lib/Option\";\nimport { flow } from \"fp-ts/lib/function\";\nimport { parseCookies } from \"nookies\";\nimport { hasura } from \"../../data/hasura\";\nimport { auth } from \"../../src/app/auth\";\n\nconst getCrUserByEmail = db => email => db.query({\n  cr_user: [{\n    where: {\n      email: {\n        _eq: email\n      }\n    }\n  }, {\n    uuid: true\n  }]\n}) // I am assuming that there is only one user with this email for now.\n.then(x => head(x.cr_user));\n\nconst createUser = db => user => db.mutation({\n  insert_cr_user: [{\n    objects: [user]\n  }, {\n    returning: {\n      uuid: true\n    }\n  }]\n}).then(flow(x => x.insert_cr_user, O.fromNullable, O.chain(data => head(data.returning.map(u => u.uuid)))));\n\nexport default async function loggedIn(req, res) {\n  const session = await auth.getSession(req);\n  const {\n    \"zm|redirectTo\": Location\n  } = parseCookies({\n    req\n  });\n  const db = hasura.fromNextReq(req);\n\n  if (session && session.user.email_verified) {\n    var _O$toNullable;\n\n    const {\n      email\n    } = session.user; // TODO: get rid of awaits, use TaskEither\n\n    const [existingUser, auth0UserId] = await Promise.all([getCrUserByEmail(db)(email), auth.management.getUsersByEmail(email).then(auth0Users => O.toUndefined(head(auth0Users.map(u => u.user_id))))]);\n\n    if (!auth0UserId) {\n      throw new Error(\"user with this email not found auth0, yet we are logged in\");\n    }\n\n    let uuid = (_O$toNullable = O.toNullable(existingUser)) === null || _O$toNullable === void 0 ? void 0 : _O$toNullable.uuid;\n\n    if (!uuid) {\n      uuid = O.toNullable((await createUser(db)({\n        /**\n         * Auth0 is the only source for our users,\n         * so we use the same id for the user in zagrajmy db.\n         * It isn't pretty, but it's useful.\n         *\n         * TODO: This requires change of uuid type to `text`.\n         * A new db schema will probably follow.\n         */\n        uuid: auth0UserId,\n        email,\n        username: session.user.nickname,\n        first_name: session.user.given_name,\n        last_name: session.user.family_name\n      })));\n      console.log(`User ${uuid} successfuly created.`);\n    }\n  }\n\n  res.writeHead(302, {\n    Location\n  }).end();\n}","map":null,"metadata":{},"sourceType":"module"}