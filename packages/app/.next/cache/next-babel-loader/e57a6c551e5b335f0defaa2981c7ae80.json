{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Heading, Text, Button, Avatar, Flex, Textarea, Input } from \"theme-ui\";\nimport { get } from \"@theme-ui/css\";\nimport { Edit, CheckSquare } from \"react-feather\";\nimport { useState, useRef } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Datepicker, { registerLocale } from \"react-datepicker\";\nimport { useTranslation } from \"react-i18next\";\nimport pl from \"date-fns/locale/pl\";\nimport { User } from \"../../../src/app/types\";\nimport { meetingsApi } from \"../../../src/app/api\";\nimport { MeetingDetailsImage, Page } from \"../../../src/app/components\";\nimport { Link } from \"../../../src/lib\";\nimport { Dl } from \"../../../src/ui\";\nimport { MaxWidthContainer } from \"../../../src/app/components/MaxWidthContainer\";\nimport { jsx } from \"theme-ui\";\nregisterLocale(\"pl-PL\", pl);\n\nconst EditMeetingButton = (_ref) => {\n  let {\n    isEditing,\n    onStartEdit,\n    onFinishEdit\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"isEditing\", \"onStartEdit\", \"onFinishEdit\"]);\n\n  const props = _objectSpread({\n    title: \"Edit meeting\"\n  }, rest);\n\n  return isEditing ? jsx(Button, _extends({\n    type: \"button\",\n    onClick: onFinishEdit\n  }, props), \"Confirm\", jsx(CheckSquare, {\n    size: 18,\n    sx: {\n      ml: 2,\n      verticalAlign: \"text-bottom\"\n    }\n  })) : jsx(Button, _extends({\n    type: \"button\",\n    onClick: onStartEdit\n  }, props), \"Edit\", jsx(Edit, {\n    size: 18,\n    sx: {\n      ml: 2,\n      verticalAlign: \"text-bottom\"\n    }\n  }));\n};\n\nexport function MeetingDetailsPage({\n  meeting\n}) {\n  var _meeting$image;\n\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const formRef = useRef(null);\n  const form = useForm({\n    defaultValues: _objectSpread({}, meeting)\n  });\n  const onSubmit = form.handleSubmit(value => {\n    console.log(\"Meeting edited\", {\n      value,\n      errors: form.errors\n    }); // AWAIT DB CHANGE HERE\n\n    setIsEditing(false);\n  });\n\n  if (!meeting) {\n    return \"404: Couldn't find meeting.\";\n  }\n\n  const linkToAuthor = children => jsx(Link, {\n    href: \"/u/[username_slug]\",\n    as: `/u/${meeting.author.slug}`,\n    sx: {\n      fontWeight: \"bold\",\n      display: \"inline-flex\"\n    }\n  }, children);\n\n  const {\n    start_time,\n    description,\n    title\n  } = form.watch({\n    nest: true\n  });\n  return jsx(Page, null, meeting.image ? jsx(React.Fragment, null, jsx(MeetingDetailsImage, {\n    image: meeting.image\n  }), jsx(Box, {\n    pt: 4\n  })) : jsx(Box, {\n    sx: {\n      width: \"100%\",\n      height: \"calc(240px + 2em)\",\n      p: 2\n    },\n    bg: \"gray.3\"\n  }, jsx(Button, {\n    type: \"button\",\n    variant: \"secondary\"\n  }, \"Add featured picture\")), jsx(MaxWidthContainer, {\n    bg: \"white\",\n    as: isEditing ? \"form\" : \"article\" // as=\"form\"\n    ,\n    ref: formRef\n    /* as React.Ref<HTMLFormElement> */\n    ,\n    onSubmit: onSubmit,\n    p: 3,\n    sx: {\n      borderRadius: \"rounded-lg\",\n      boxShadow: \"sm\",\n      zIndex: 1,\n      mt: ((_meeting$image = meeting.image) === null || _meeting$image === void 0 ? void 0 : _meeting$image.kind) !== \"background\" ? th => `-${get(th, \"space.3\")}px` : 0\n    }\n  }, jsx(\"header\", null, jsx(Flex, {\n    sx: {\n      alignItems: \"center\"\n    }\n  }, jsx(Flex, {\n    sx: {\n      alignItems: \"center\",\n      color: \"gray.9\",\n      \"@media (hover: hover)\": {\n        \"> button\": {\n          opacity: 0.2\n        },\n        \":hover > button\": {\n          opacity: 1\n        }\n      }\n    }\n  }, isEditing ? jsx(Controller, {\n    name: \"start_time\",\n    as: Datepicker,\n    control: form.control,\n    showTimeSelect: true,\n    customInput: jsx(Input, {\n      sx: {\n        bg: \"gray.1\",\n        border: 0\n      }\n    }),\n    valueName: \"selected\",\n    defaultValue: start_time || new Date(),\n    dateFormat: \"Pp\",\n    timeFormat: \"p\" // locale=\"pl-PL\" // TODO: Check if it's detected and respects preference\n\n  }) : jsx(Text, {\n    as: \"span\",\n    sx: {\n      padding: 1,\n      fontWeight: 500\n    }\n  }, start_time && new Date(start_time).toLocaleString(\"pl-PL\"))), jsx(\"div\", {\n    role: \"group\",\n    sx: {\n      marginLeft: \"auto\"\n    }\n  }, jsx(EditMeetingButton, {\n    isEditing: isEditing,\n    onStartEdit: () => setIsEditing(true),\n    onFinishEdit: () => {\n      if (formRef.current) {\n        formRef.current.dispatchEvent(new Event(\"submit\"));\n      }\n    }\n  }))), isEditing ? jsx(Input, {\n    mt: 1,\n    mb: 3,\n    sx: {\n      boxSizing: \"border-box\",\n      margin: 0,\n      padding: 0,\n      minWidth: 0,\n      // TODO: this shouldn't be copied\n      fontSize: 7,\n      letterSpacing: \"-0.049375rem\",\n      border: \"none\",\n      fontFamily: \"inherit\",\n      fontWeight: \"heading\",\n      lineHeight: \"heading\",\n      marginTop: \"4px\",\n      marginBottom: \"16px\",\n      backgroundColor: \"background\",\n      borderRadius: \"rounded\"\n    },\n    name: \"title\",\n    ref: form.register({\n      minLength: 4\n    })\n  }) : jsx(Heading, {\n    mt: 1,\n    mb: 3\n  }, title), jsx(Flex, {\n    mb: 3,\n    sx: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    }\n  }, linkToAuthor(jsx(Avatar, {\n    src: User.avatar(meeting.author) || \"\",\n    bg: \"primaryDark\",\n    sx: {\n      borderRadius: \"50%\"\n    }\n  })), jsx(\"div\", {\n    sx: {\n      ml: 2,\n      fontSize: 3\n    }\n  }, jsx(Text, {\n    as: \"span\"\n  }, \"Hosted by \"), linkToAuthor(meeting.author.name)))), jsx(Dl, {\n    sx: {\n      mt: 2\n    }\n  }, jsx(\"dt\", null, \"Opublikowano\"), jsx(\"dd\", null, meeting.published_at ? new Date(meeting.published_at).toLocaleString(\"pl-PL\") : t(\"not-published\")), jsx(\"dt\", null, \"Utworzono\"), jsx(\"dd\", null, meeting.created_at && new Date(meeting.created_at).toLocaleString(\"pl-PL\"))), jsx(\"section\", {\n    sx: {\n      mt: 3\n    }\n  }, jsx(Heading, {\n    as: \"h3\",\n    sx: {\n      fontSize: 3,\n      mb: 2\n    }\n  }, t(\"meeting-description\")), isEditing ? jsx(Textarea, {\n    rows: 5,\n    sx: {\n      resize: \"none\"\n    },\n    name: \"description\",\n    ref: form.register()\n  }) : jsx(\"p\", {\n    sx: {\n      mt: 0\n    }\n  }, description))));\n}\n\nMeetingDetailsPage.getInitialProps = async ({\n  query\n}) => {\n  const meeting = await meetingsApi.get(query.id);\n  return {\n    meeting\n  };\n};\n\nexport default MeetingDetailsPage;","map":null,"metadata":{},"sourceType":"module"}