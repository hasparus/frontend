{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// TODO:\nvar piotr = {\n  name: \"Piotr Monwid-Olechnowicz\",\n  slug: \"hasparus\",\n  email: \"piotr@zagraj.my\"\n};\nvar tony = {\n  name: \"Ironman\",\n  slug: \"ironman\",\n  email: \"boss@stark.com\"\n};\nexport var meetings = [// past meetings\n{\n  id: 1,\n  author: piotr,\n  title: \"Dungeon World One-Shot\",\n  description: \"Lorem ipsum dolor sit amet\",\n  published_at: new Date(1000),\n  created_at: new Date(900),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"background\"\n  }\n}, {\n  id: 2,\n  author: piotr,\n  title: \"D&D Tomb of Annihilation: Episode 01\",\n  description: \"\",\n  published_at: new Date(1400),\n  created_at: new Date(1100),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"banner\"\n  }\n}, {\n  id: 3,\n  author: tony,\n  title: \"Avengers Weekly Board Games I\",\n  description: \"\",\n  published_at: new Date(2000),\n  created_at: new Date(1800),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"small\"\n  }\n}, {\n  id: 4,\n  author: tony,\n  title: \"Avengers Weekly Board Games II\",\n  description: \"Lorem ipsum dolor sit amet\",\n  published_at: new Date(2200),\n  created_at: new Date(2000),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"background\"\n  }\n}].concat(_toConsumableArray(new Array(100).fill(0).map(function (_, i) {\n  return {\n    id: \"future-\".concat(i),\n    author: piotr,\n    created_at: new Date(Date.now() - i * 1000),\n    published_at: new Date(Date.now() - i * 1000),\n    start_time: i % 2 === 0 ? new Date(Date.now() + i * 100000) : undefined,\n    title: \"Dungeon World One-Shot \".concat(i),\n    description: \"This is a test meeting. We have no backend yet\",\n    image: [{\n      src: \"https://source.unsplash.com/random/2000x2000\",\n      kind: \"background\"\n    }, {\n      src: \"https://source.unsplash.com/random/2000x400\",\n      kind: \"banner\"\n    }, {\n      src: \"https://source.unsplash.com/random/400x400\",\n      kind: \"small\"\n    }, undefined][i % 4]\n  };\n})));\nexport var meetingsApi = {\n  getAll: function getAll() {\n    return Promise.resolve(meetings);\n  },\n  get: function get(meetingId) {\n    return Promise.resolve(meetings.find(function (m) {\n      return String(m.id) === String(meetingId);\n    }));\n  },\n  add: function add(meeting) {\n    var m = _objectSpread({}, meeting, {\n      id: Math.floor(Math.random() * 1000)\n    });\n\n    if (Math.random() > 0.1) {\n      meetings.push(m);\n      return Promise.resolve(m);\n    } // fake error\n\n\n    return Promise.reject(new Error(\"fake cant add meeting\"));\n  },\n  update: function update(data) {\n    var meeting = meetings.find(function (m) {\n      return m.id === data.id;\n    });\n    Object.assign(meeting, data);\n    return meeting;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}