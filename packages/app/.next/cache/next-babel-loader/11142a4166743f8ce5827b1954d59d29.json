{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { initAuth0 } from \"@auth0/nextjs-auth0\";\nimport * as dotenv from \"dotenv\";\nexport * from \"./types\"; // eslint-disable-next-line import/no-mutable-exports\n\nexport let auth = (() => {\n  if (false) {\n    return undefined;\n  }\n\n  dotenv.config();\n  /**\n   * We use the same Auth0 application to access\n   * Management API and Authentication API right now.\n   * Avoid leaking AUTH0_CLIENT_SECRET to the frontend or\n   * create two apps -- Next Clientside and Next Serverside if\n   * clientside Auth0 Authentication API actions are needed.\n   *\n   * TODO: Check if this code is accessible in browser.\n   */\n\n  const {\n    AUTH0_DOMAIN,\n    AUTH0_CLIENT_ID,\n    AUTH0_CLIENT_SECRET,\n    AUTH0_COOKIE_SECRET\n  } = process.env;\n  const auth0 = initAuth0({\n    domain: AUTH0_DOMAIN,\n    clientId: AUTH0_CLIENT_ID,\n    clientSecret: AUTH0_CLIENT_SECRET,\n    scope: \"openid profile\",\n    redirectUri: \"http://localhost:3000/api/login-callback\",\n    postLogoutRedirectUri: \"http://localhost:3000/\",\n    session: {\n      cookieSecret: AUTH0_COOKIE_SECRET,\n      cookieLifetime: 60 * 60 * 8\n    }\n  }); // TODO: Remove me\n  // user id from session will be exactly the user_id in zagrajmy db\n\n  const getSession = async req => {\n    const session = await auth0.getSession(req);\n\n    if (session) {\n      // getCookie?\n      session.user.uuid = \"not-implemented-yet\";\n    }\n\n    return session;\n  };\n\n  const getSessionOrLogIn = async (req, res) => {\n    if (true && req && res) {\n      const session = await getSession(req);\n\n      if (!(session === null || session === void 0 ? void 0 : session.user)) {\n        res.writeHead(302, {\n          Location: \"/api/login\"\n        });\n        res.end();\n        return {\n          user: null\n        };\n      }\n\n      return {\n        user: session.user\n      };\n    }\n\n    return {\n      user: null\n    };\n  };\n\n  const createManagementClient = () => {\n    if (true) {\n      // eslint-disable-next-line global-require\n      const {\n        ManagementClient\n      } = require(\"auth0\");\n\n      return new ManagementClient({\n        domain: \"zagrajmy.eu.auth0.com\",\n        clientId: AUTH0_CLIENT_ID,\n        clientSecret: AUTH0_CLIENT_SECRET,\n        scope: \"read:users update:users delete:users\",\n        audience: \"https://zagrajmy.eu.auth0.com/api/v2/\"\n      });\n    }\n\n    return new Proxy({}, {\n      get() {\n        throw new Error(`ManagementAPI can't be accessed on clientside`);\n      }\n\n    });\n  };\n\n  return _objectSpread({}, auth0, {\n    getSession,\n    getSessionOrLogIn,\n    management: createManagementClient()\n  });\n})();\nauth = auth || new Proxy({}, {\n  /**\n   * @see https://github.com/auth0/nextjs-auth0/blob/master/src/instance.browser.ts\n   */\n  get(_target, _property) {\n    return () => ({\n      __SHOULD_NOT_BE_USED_IN_BROWSER: true\n    });\n  }\n\n});","map":{"version":3,"sources":["/home/hasparus/workspace/zagrajmy/frontend/packages/app/src/app/auth/index.ts"],"names":["initAuth0","dotenv","auth","undefined","config","AUTH0_DOMAIN","AUTH0_CLIENT_ID","AUTH0_CLIENT_SECRET","AUTH0_COOKIE_SECRET","process","env","auth0","domain","clientId","clientSecret","scope","redirectUri","postLogoutRedirectUri","session","cookieSecret","cookieLifetime","getSession","req","user","uuid","getSessionOrLogIn","res","writeHead","Location","end","createManagementClient","ManagementClient","require","audience","Proxy","get","Error","management","_target","_property","__SHOULD_NOT_BE_USED_IN_BROWSER"],"mappings":"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","sourcesContent":["import { initAuth0 } from \"@auth0/nextjs-auth0\";\nimport { ServerResponse, IncomingMessage } from \"http\";\n\nimport * as dotenv from \"dotenv\";\n\nimport { Session, UserUuid } from \"./types\";\n\nexport * from \"./types\";\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let auth = (() => {\n  if (typeof window !== \"undefined\") {\n    return undefined;\n  }\n\n  dotenv.config();\n\n  /**\n   * We use the same Auth0 application to access\n   * Management API and Authentication API right now.\n   * Avoid leaking AUTH0_CLIENT_SECRET to the frontend or\n   * create two apps -- Next Clientside and Next Serverside if\n   * clientside Auth0 Authentication API actions are needed.\n   *\n   * TODO: Check if this code is accessible in browser.\n   */\n  const {\n    AUTH0_DOMAIN,\n    AUTH0_CLIENT_ID,\n    AUTH0_CLIENT_SECRET,\n    AUTH0_COOKIE_SECRET,\n  } = process.env;\n\n  const auth0 = initAuth0({\n    domain: AUTH0_DOMAIN!,\n    clientId: AUTH0_CLIENT_ID!,\n    clientSecret: AUTH0_CLIENT_SECRET!,\n    scope: \"openid profile\",\n    redirectUri: \"http://localhost:3000/api/login-callback\",\n    postLogoutRedirectUri: \"http://localhost:3000/\",\n    session: {\n      cookieSecret: AUTH0_COOKIE_SECRET!,\n      cookieLifetime: 60 * 60 * 8,\n    },\n  });\n\n  // TODO: Remove me\n  // user id from session will be exactly the user_id in zagrajmy db\n  const getSession = async (\n    req: IncomingMessage\n  ): Promise<Session | undefined | null> => {\n    const session = (await auth0.getSession(req)) as Session;\n\n    if (session) {\n      // getCookie?\n      session.user.uuid = \"not-implemented-yet\" as UserUuid;\n    }\n\n    return session;\n  };\n\n  const getSessionOrLogIn = async (\n    req?: IncomingMessage,\n    res?: ServerResponse\n  ) => {\n    if (typeof window === \"undefined\" && req && res) {\n      const session = await getSession(req);\n      if (!session?.user) {\n        res.writeHead(302, { Location: \"/api/login\" });\n        res.end();\n\n        return { user: null };\n      }\n\n      return { user: session.user };\n    }\n    return { user: null };\n  };\n\n  const createManagementClient = () => {\n    type ManagementClient = import(\"auth0\").ManagementClient;\n    if (typeof window === \"undefined\") {\n      // eslint-disable-next-line global-require\n      const { ManagementClient } = require(\"auth0\") as typeof import(\"auth0\");\n\n      return new ManagementClient({\n        domain: \"zagrajmy.eu.auth0.com\",\n        clientId: AUTH0_CLIENT_ID,\n        clientSecret: AUTH0_CLIENT_SECRET,\n        scope: \"read:users update:users delete:users\",\n        audience: \"https://zagrajmy.eu.auth0.com/api/v2/\",\n      });\n    }\n\n    return new Proxy<ManagementClient>({} as ManagementClient, {\n      get() {\n        throw new Error(`ManagementAPI can't be accessed on clientside`);\n      },\n    });\n  };\n\n  return {\n    ...auth0,\n    getSession,\n    getSessionOrLogIn,\n    management: createManagementClient(),\n  };\n})()!;\n\ntype Auth = typeof auth;\n\nauth =\n  auth ||\n  new Proxy<Auth>({} as Auth, {\n    /**\n     * @see https://github.com/auth0/nextjs-auth0/blob/master/src/instance.browser.ts\n     */\n    get(_target, _property) {\n      return () => ({ __SHOULD_NOT_BE_USED_IN_BROWSER: true });\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}