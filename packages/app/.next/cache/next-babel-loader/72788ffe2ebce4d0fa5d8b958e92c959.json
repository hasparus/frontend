{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { initAuth0 } from \"@auth0/nextjs-auth0\";\nimport * as dotenv from \"dotenv\";\nexport * from \"./types\"; // eslint-disable-next-line import/no-mutable-exports\n\nexport var auth = function () {\n  if (true) {\n    return undefined;\n  }\n\n  dotenv.config();\n  /**\n   * We use the same Auth0 application to access\n   * Management API and Authentication API right now.\n   * Avoid leaking AUTH0_CLIENT_SECRET to the frontend or\n   * create two apps -- Next Clientside and Next Serverside if\n   * clientside Auth0 Authentication API actions are needed.\n   *\n   * TODO: Check if this code is accessible in browser.\n   */\n\n  var _process$env = process.env,\n      AUTH0_DOMAIN = _process$env.AUTH0_DOMAIN,\n      AUTH0_CLIENT_ID = _process$env.AUTH0_CLIENT_ID,\n      AUTH0_CLIENT_SECRET = _process$env.AUTH0_CLIENT_SECRET,\n      AUTH0_COOKIE_SECRET = _process$env.AUTH0_COOKIE_SECRET;\n  var auth0 = initAuth0({\n    domain: AUTH0_DOMAIN,\n    clientId: AUTH0_CLIENT_ID,\n    clientSecret: AUTH0_CLIENT_SECRET,\n    scope: \"openid profile\",\n    redirectUri: \"http://localhost:3000/api/login-callback\",\n    postLogoutRedirectUri: \"http://localhost:3000/\",\n    session: {\n      cookieSecret: AUTH0_COOKIE_SECRET,\n      cookieLifetime: 60 * 60 * 8\n    }\n  }); // TODO: Remove me\n  // user id from session will be exactly the user_id in zagrajmy db\n\n  var getSession = function getSession(req) {\n    var session;\n    return _regeneratorRuntime.async(function getSession$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(auth0.getSession(req));\n\n          case 2:\n            session = _context.sent;\n\n            if (session) {\n              // getCookie?\n              session.user.uuid = \"not-implemented-yet\";\n            }\n\n            return _context.abrupt(\"return\", session);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getSessionOrLogIn = function getSessionOrLogIn(req, res) {\n    var session;\n    return _regeneratorRuntime.async(function getSessionOrLogIn$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(false && req && res)) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getSession(req));\n\n          case 3:\n            session = _context2.sent;\n\n            if (session === null || session === void 0 ? void 0 : session.user) {\n              _context2.next = 8;\n              break;\n            }\n\n            res.writeHead(302, {\n              Location: \"/api/login\"\n            });\n            res.end();\n            return _context2.abrupt(\"return\", {\n              user: null\n            });\n\n          case 8:\n            return _context2.abrupt(\"return\", {\n              user: session.user\n            });\n\n          case 9:\n            return _context2.abrupt(\"return\", {\n              user: null\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var createManagementClient = function createManagementClient() {\n    if (false) {\n      // eslint-disable-next-line global-require\n      var _ref = require(\"auth0\"),\n          _ManagementClient = _ref.ManagementClient;\n\n      return new _ManagementClient({\n        domain: \"zagrajmy.eu.auth0.com\",\n        clientId: AUTH0_CLIENT_ID,\n        clientSecret: AUTH0_CLIENT_SECRET,\n        scope: \"read:users update:users delete:users\",\n        audience: \"https://zagrajmy.eu.auth0.com/api/v2/\"\n      });\n    }\n\n    return new Proxy({}, {\n      get: function get() {\n        throw new Error(\"ManagementAPI can't be accessed on clientside\");\n      }\n    });\n  };\n\n  return _objectSpread({}, auth0, {\n    getSession: getSession,\n    getSessionOrLogIn: getSessionOrLogIn,\n    management: createManagementClient()\n  });\n}();\nauth = auth || new Proxy({}, {\n  /**\n   * @see https://github.com/auth0/nextjs-auth0/blob/master/src/instance.browser.ts\n   */\n  get: function get(_target, _property) {\n    return function () {\n      return {\n        __SHOULD_NOT_BE_USED_IN_BROWSER: true\n      };\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}