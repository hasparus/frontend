{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// TODO:\nconst piotr = {\n  name: \"Piotr Monwid-Olechnowicz\",\n  slug: \"hasparus\",\n  email: \"piotr@zagraj.my\"\n};\nconst tony = {\n  name: \"Ironman\",\n  slug: \"ironman\",\n  email: \"boss@stark.com\"\n};\nexport const meetings = [// past meetings\n{\n  id: 1,\n  author: piotr,\n  title: \"Dungeon World One-Shot\",\n  description: \"Lorem ipsum dolor sit amet\",\n  published_at: new Date(1000),\n  created_at: new Date(900),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"background\"\n  }\n}, {\n  id: 2,\n  author: piotr,\n  title: \"D&D Tomb of Annihilation: Episode 01\",\n  description: \"\",\n  published_at: new Date(1400),\n  created_at: new Date(1100),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"banner\"\n  }\n}, {\n  id: 3,\n  author: tony,\n  title: \"Avengers Weekly Board Games I\",\n  description: \"\",\n  published_at: new Date(2000),\n  created_at: new Date(1800),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"small\"\n  }\n}, {\n  id: 4,\n  author: tony,\n  title: \"Avengers Weekly Board Games II\",\n  description: \"Lorem ipsum dolor sit amet\",\n  published_at: new Date(2200),\n  created_at: new Date(2000),\n  start_time: new Date(5000),\n  image: {\n    src: \"https://source.unsplash.com/random/2200x400\",\n    kind: \"background\"\n  }\n}, // future meetings\n...new Array(100).fill(0).map((_, i) => ({\n  id: `future-${i}`,\n  author: piotr,\n  created_at: new Date(Date.now() - i * 1000),\n  published_at: new Date(Date.now() - i * 1000),\n  start_time: i % 2 === 0 ? new Date(Date.now() + i * 100000) : undefined,\n  title: `Dungeon World One-Shot ${i}`,\n  description: \"This is a test meeting. We have no backend yet\",\n  image: [{\n    src: \"https://source.unsplash.com/random/2000x2000\",\n    kind: \"background\"\n  }, {\n    src: \"https://source.unsplash.com/random/2000x400\",\n    kind: \"banner\"\n  }, {\n    src: \"https://source.unsplash.com/random/400x400\",\n    kind: \"small\"\n  }, undefined][i % 4]\n}))];\nexport const meetingsApi = {\n  getAll: () => Promise.resolve(meetings),\n  get: meetingId => Promise.resolve(meetings.find(m => String(m.id) === String(meetingId))),\n  add: meeting => {\n    const m = _objectSpread({}, meeting, {\n      id: Math.floor(Math.random() * 1000)\n    });\n\n    if (Math.random() > 0.1) {\n      meetings.push(m);\n      return Promise.resolve(m);\n    } // fake error\n\n\n    return Promise.reject(new Error(\"fake cant add meeting\"));\n  },\n  update: data => {\n    const meeting = meetings.find(m => m.id === data.id);\n    Object.assign(meeting, data);\n    return meeting;\n  }\n};","map":{"version":3,"sources":["/home/hasparus/workspace/zagrajmy/frontend/packages/app/src/app/api/index.tsx"],"names":["piotr","name","slug","email","tony","meetings","id","author","title","description","published_at","Date","created_at","start_time","image","src","kind","Array","fill","map","_","i","now","undefined","meetingsApi","getAll","Promise","resolve","get","meetingId","find","m","String","add","meeting","Math","floor","random","push","reject","Error","update","data","Object","assign"],"mappings":"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","sourcesContent":["import { Meeting, User, Id } from \"../types\";\n\n// TODO:\n\nconst piotr: User = {\n  name: \"Piotr Monwid-Olechnowicz\",\n  slug: \"hasparus\",\n  email: \"piotr@zagraj.my\",\n};\n\nconst tony: User = {\n  name: \"Ironman\",\n  slug: \"ironman\",\n  email: \"boss@stark.com\",\n};\n\nexport const meetings: Meeting[] = [\n  // past meetings\n  {\n    id: 1,\n    author: piotr,\n    title: \"Dungeon World One-Shot\",\n    description: \"Lorem ipsum dolor sit amet\",\n    published_at: new Date(1000),\n    created_at: new Date(900),\n    start_time: new Date(5000),\n    image: {\n      src: \"https://source.unsplash.com/random/2200x400\",\n      kind: \"background\",\n    },\n  },\n  {\n    id: 2,\n    author: piotr,\n    title: \"D&D Tomb of Annihilation: Episode 01\",\n    description: \"\",\n    published_at: new Date(1400),\n    created_at: new Date(1100),\n    start_time: new Date(5000),\n    image: {\n      src: \"https://source.unsplash.com/random/2200x400\",\n      kind: \"banner\",\n    },\n  },\n  {\n    id: 3,\n    author: tony,\n    title: \"Avengers Weekly Board Games I\",\n    description: \"\",\n    published_at: new Date(2000),\n    created_at: new Date(1800),\n    start_time: new Date(5000),\n    image: {\n      src: \"https://source.unsplash.com/random/2200x400\",\n      kind: \"small\",\n    },\n  },\n  {\n    id: 4,\n    author: tony,\n    title: \"Avengers Weekly Board Games II\",\n    description: \"Lorem ipsum dolor sit amet\",\n    published_at: new Date(2200),\n    created_at: new Date(2000),\n    start_time: new Date(5000),\n    image: {\n      src: \"https://source.unsplash.com/random/2200x400\",\n      kind: \"background\",\n    },\n  },\n  // future meetings\n  ...new Array(100).fill(0).map(\n    (_, i): Meeting => ({\n      id: `future-${i}`,\n      author: piotr,\n      created_at: new Date(Date.now() - i * 1000),\n      published_at: new Date(Date.now() - i * 1000),\n      start_time: i % 2 === 0 ? new Date(Date.now() + i * 100000) : undefined,\n      title: `Dungeon World One-Shot ${i}`,\n      description: \"This is a test meeting. We have no backend yet\",\n      image: ([\n        {\n          src: \"https://source.unsplash.com/random/2000x2000\",\n          kind: \"background\",\n        },\n        {\n          src: \"https://source.unsplash.com/random/2000x400\",\n          kind: \"banner\",\n        },\n        {\n          src: \"https://source.unsplash.com/random/400x400\",\n          kind: \"small\",\n        },\n        undefined,\n      ] as const)[i % 4],\n    })\n  ),\n];\n\nexport const meetingsApi = {\n  getAll: () => Promise.resolve(meetings),\n  get: (meetingId: Id) =>\n    Promise.resolve(meetings.find(m => String(m.id) === String(meetingId))),\n  add: (meeting: Omit<Meeting, \"id\">) => {\n    const m: Meeting = { ...meeting, id: Math.floor(Math.random() * 1000) };\n    if (Math.random() > 0.1) {\n      meetings.push(m);\n      return Promise.resolve(m);\n    }\n    // fake error\n    return Promise.reject(new Error(\"fake cant add meeting\"));\n  },\n  update: (data: Partial<Meeting> & { id: Meeting[\"id\"] }) => {\n    const meeting = meetings.find(m => m.id === data.id);\n    Object.assign(meeting, data);\n    return meeting;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}