{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nimport { record } from \"fp-ts/lib/Record\";\nimport { parseCookies } from \"nookies\";\nimport { Chain } from \"./graphql-zeus\";\nimport { isDefined } from \"../src/lib/isDefined\";\n\nconst _global = false ? window : globalThis;\n\nObject.assign(_global, {\n  fetch: _global.fetch || fetch\n});\nconst {\n  HASURA_URL\n} = process.env;\n/**\n * configured by `zm|db-env` cookie\n */\n\nconst hasuraEnvs = {\n  localhost: {\n    url: \"http://localhost:8080\",\n    adminSecret: \"dev_only_password\"\n  },\n  development: {\n    url: \"https://zagrajmy-db-dev.herokuapp.com\",\n    adminSecret: undefined\n  },\n  production: HASURA_URL ? {\n    url: HASURA_URL,\n    adminSecret: process.env.HASURA_ADMIN_SECRET\n  } : undefined\n};\n/**\n * creates a hasura graphql client for database env name\n */\n\nexport const hasura = instance => {\n  const creds = hasuraEnvs[instance];\n\n  if (!creds) {\n    // I want this to fail fast and throw 500.\n    throw new Error(\"wrong database instance: credentails missing\");\n  }\n\n  return Chain(`${creds.url}/v1/graphql`, {\n    headers: record.filter({\n      \"X-Hasura-Admin-Secret\": creds.adminSecret\n    }, isDefined)\n  });\n};\n\nhasura.fromNextReq = req => {\n  return hasura(parseCookies({\n    req\n  })[\"zm|db-env\"] || \"development\");\n};","map":null,"metadata":{},"sourceType":"module"}